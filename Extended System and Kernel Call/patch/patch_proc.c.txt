44a45,47
> // Added by Ya Chutiraka for proj2 11/21/2016
> #include "glo.h"
> #include "clock.h"
45a49,51
> struct buffer_plog buffer_plog[BUFFER_SIZE];
> int current;
> endpoint_t interested; //endpoint of the proc we want to track
46a53,64
> const char* getStateName(enum State state);
> 
> const char* getStateName(enum State state) {
>    switch (state) {
> 	  case NEWLY_CREATED: return "NEWLY_CREATED";
> 	  case READY: return "READY";
> 	  case RUNNING: return "RUNNING";
> 	  case BLOCKED: return "BLOCKED";
> 	  case TERMINATED: return "TERMINATED";
>    }
> }
> 
1579a1598,1629
> 
>  //Added by Ya Chutiraka for proj2
>  if(rp->p_endpoint == interested  && rp->p_isTracked == 1){
> 	 
>     current = current + 1;
>     if(current >= BUFFER_SIZE){
> 		//notify that buffer is full
> 		message m;
> 		m.m1_p1 = (char *) &(buffer_plog[0]);
> 		m.m1_i2 = (endpoint_lookup(KERNEL))->p_endpoint;
> 		m.m_type = KERNEL_TO_VFS;
> 		mini_send(endpoint_lookup(KERNEL), VFS_PROC_NR, &m, FROM_KERNEL);
> 		current = 0;
> 	}
>     
>     buffer_plog[current].thisPID = rp->p_pid;
> 	if(rp->p_prev_state == 0) buffer_plog[current].fromState = NEWLY_CREATED;
> 	else if(rp->p_prev_state == 1) buffer_plog[current].fromState = READY;
> 	else if(rp->p_prev_state == 2) buffer_plog[current].fromState = RUNNING;
> 	else if(rp->p_prev_state == 3) buffer_plog[current].fromState = BLOCKED;
> 	else buffer_plog[current].fromState = TERMINATED;
> 	buffer_plog[current].toState = READY;
> 	buffer_plog[current].timestamp = get_uptime();
> 	rp->p_prev_state = 1;
> 	// how to find time stamp in kernel?
> 	/*
> 	printf("\nENQUEUE pid = %d", rp->p_pid);
> 	printf("\ncurrent = %d, from = %s, to = %s, timestamp = %ld", current , getStateName(buffer_plog[current].fromState), getStateName(buffer_plog[current].toState), (long)buffer_plog[current].timestamp);
> 	*/
> 	
>  }
> 
1698a1749,1777
> // Added by Ya Chutiraka for Project2
> 
>    if(rp->p_endpoint == interested && rp->p_isTracked == 1){
> 	 
>     current = current + 1;
>     if(current >= BUFFER_SIZE){
> 		message m;
> 		m.m1_p1 = (char *) &(buffer_plog[0]);
> 		m.m1_i2 = (endpoint_lookup(KERNEL))->p_endpoint;
> 		m.m_type = KERNEL_TO_VFS;
> 		mini_send(endpoint_lookup(KERNEL), VFS_PROC_NR, &m, FROM_KERNEL);
> 		current = 0;
> 	}
> 
>     buffer_plog[current].thisPID = rp->p_pid;
> 	if(rp->p_prev_state == 0) buffer_plog[current].fromState = NEWLY_CREATED;
> 	else if(rp->p_prev_state == 1) buffer_plog[current].fromState = READY;
> 	else if(rp->p_prev_state == 2) buffer_plog[current].fromState = RUNNING;
> 	else if(rp->p_prev_state == 3) buffer_plog[current].fromState = BLOCKED;
> 	buffer_plog[current].toState = BLOCKED;
> 	buffer_plog[current].timestamp = get_uptime();
> 	rp->p_prev_state = 3;
> 	
> 	/*
> 	printf("\nDEQUEUE pid = %d", rp->p_pid);
> 	printf("\ncurrent = %d, from = %s, to = %s, timestamp = %ld", current, getStateName(buffer_plog[current].fromState), getStateName(buffer_plog[current].toState), (long)buffer_plog[current].timestamp);
>    */
>    }
> 
1728a1808,1834
> 	
> 	// Added by Ya Chutiraka for project 2
>    if(rp->p_endpoint == interested && rp->p_isTracked == 1){
> 	 
>     current = current + 1;
>     if(current >= BUFFER_SIZE){
> 		message m;
> 		m.m1_p1 = (char *) &(buffer_plog[0]);
> 		m.m1_i2 = (endpoint_lookup(KERNEL))->p_endpoint;
> 		m.m_type = KERNEL_TO_VFS;
> 		mini_send(endpoint_lookup(KERNEL), VFS_PROC_NR, &m, FROM_KERNEL);
> 		current = 0;
> 	}
>     
>     buffer_plog[current].thisPID = rp->p_pid;
> 	if(rp->p_prev_state == 0) buffer_plog[current].fromState = NEWLY_CREATED;
> 	else if(rp->p_prev_state == 1) buffer_plog[current].fromState = READY;
> 	else if(rp->p_prev_state == 2) buffer_plog[current].fromState = RUNNING;
> 	else if(rp->p_prev_state == 3) buffer_plog[current].fromState = BLOCKED;
> 	buffer_plog[current].toState = RUNNING;
> 	buffer_plog[current].timestamp = get_uptime();
> 	rp->p_prev_state = 2;
> 	/*
> 	printf("\nPICK PROC pid = %d", rp->p_pid);
> 	printf("\ncurrent = %d, from = %s, to = %s, timestamp = %ld", current, getStateName(buffer_plog[current].fromState), getStateName(buffer_plog[current].toState), (long)buffer_plog[current].timestamp);
>    */
>    }
1730a1837
> 
